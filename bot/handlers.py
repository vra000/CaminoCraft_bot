import asyncio
from aiogram import F, Router
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from config import HOST, ADMIN_ID
import app.bot.database.requests as rq
import app.bot.keyboards as kb
from app.bot.server_status import online, offline, is_server_online
import app.bot.bug_reports as br


router = Router()

async def delete_message_later(message, delay=None):
    if delay is None:
        try:
            await message.delete()
        except Exception:
            pass
    elif delay and delay > 0:
        await asyncio.sleep(delay)
        try:
            await message.delete()
        except Exception:
            pass

async def reports_list(call: CallbackQuery, text: str, reply_markup=None, parse_mode=None):
    try:
        await call.message.edit_text(
            text,
            reply_markup=await kb.admin_reports(),
            parse_mode=parse_mode
        )
    except Exception:
        await call.message.delete()
        await call.bot.send_message(
            chat_id=call.message.chat.id,
            text=text,
            reply_markup=reply_markup,
            parse_mode=parse_mode
        )


@router.message(Command('start'))
async def cmd_anwser(message: Message, state: FSMContext):
    data = await state.get_data()
    old_msg_id = data.get('menu_msg_id')
    if old_msg_id:
        try:
            await message.bot.delete_message(chat_id=message.chat.id, message_id=old_msg_id)
        except Exception:
            pass
    msg = await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç –≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é –ø–∞–Ω–µ–ª—å.', reply_markup=kb.main_keyboard)
    await state.update_data(menu_msg_id=msg.message_id)

@router.callback_query(F.data.in_({'mInfo', 'mStatus', 'update', 'mBug_report', 'back'}))
async def main_callback_query(call: CallbackQuery):
    if call.data == 'mInfo':
        await call.answer()
        await call.message.edit_text(
            '‚Ñπ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è*\n\n–í –¥–∞–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ –µ—Å—Ç—å –≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ç–∞–∫—Ç–∞—Ö.',
            parse_mode='Markdown',
            reply_markup=kb.info_keyboard
        )

    if call.data == 'mStatus':
        print("–°—Ç–∞—Ç—É—Å")
        status = await is_server_online()
        if status == online:
            await call.message.edit_text(
                f'üåê *–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞*\n\n–°–µ—Ä–≤–µ—Ä: {HOST}\n–°—Ç–∞—Ç—É—Å: {online}',
                parse_mode='Markdown',
                reply_markup=kb.status_keyboard
            )
        elif status == offline:
            await call.message.edit_text(
                f'–°–µ—Ä–≤–µ—Ä: {HOST}\n–°—Ç–∞—Ç—É—Å: {offline}',
                reply_markup=kb.status_keyboard
            )
        else:
            await call.answer(text="–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞ –µ—â—ë –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ.", show_alert=False)

    elif call.data == 'update':
        from app.bot.server_status import previous_status
        prev = previous_status
        status = await is_server_online()
        if status != prev:
            import app.bot.server_status
            app.bot.server_status.previous_status = status

            if status == online:
                await call.message.edit_text(
                    f'–°–µ—Ä–≤–µ—Ä: {HOST}\n–°—Ç–∞—Ç—É—Å: {online}\n–ò–≥—Ä–æ–∫–∏:',
                    reply_markup=kb.status_keyboard
                )
            elif status == offline:
                await call.message.edit_text(
                    f'–°–µ—Ä–≤–µ—Ä: {HOST}\n–°—Ç–∞—Ç—É—Å: {offline}',
                    reply_markup=kb.status_keyboard
                )
        else:
            await call.answer(text="–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è", show_alert=True)

    if call.data == 'mBug_report':
        await call.message.edit_text(
            'üêû *–†–µ–ø–æ—Ä—Ç –±–∞–≥–∞*\n\n–ï—Å–ª–∏ –≤—ã –Ω–∞—à–ª–∏ –±–∞–≥ –≤ —Å–∏—Å—Ç–µ–º–µ (—á—Ç–æ-—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ —Ç–∞–∫), —Ç–æ –ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—Å–∞–≤ –ø—Ä–æ–±–ª–µ–º—É, –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –∑–¥–µ—Å—å.',
            parse_mode='Markdown',
            reply_markup=kb.report_keyboard
        )

    elif call.data == 'back':
        await call.message.edit_text(
            '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é –ø–∞–Ω–µ–ª—å.',
            reply_markup=kb.main_keyboard
        )

@router.callback_query(F.data == 'report_asking')
async def ask_desk(call: CallbackQuery, state: FSMContext):
    if await rq.is_punished(call.from_user.id):
        await call.answer('–í—ã –±—ã–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–∞–∫–∞–∑–∞–Ω—ã –∑–∞ –Ω–µ–∫–∫–æ—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ–ø–æ—Ä—Ç ‚ö†')
    else:
        await rq.set_user_data(user_id=call.from_user.id,username=call.from_user.username)
        await state.set_state(br.BugReport.desc)
        await call.message.edit_text(
            '*–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã*\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É, —Å –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å. –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ —Ä–µ–ø–æ—Ä—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω—ë–Ω.\n\n*–§–æ—Ä–º–∞—Ç:* 10-500 —Å–∏–º–≤–æ–ª–æ–≤.',
            parse_mode="Markdown",
            reply_markup=kb.report_desc
        )

@router.message(br.BugReport.desc, F.text)
async def save_desc(message: Message, state: FSMContext):
    await state.update_data(desc=message.text)

@router.callback_query(F.data == 'confirm_desc')
async def ask_photo(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    description = data.get('desc', '')
    char_count = len(description)
    if char_count <10 or char_count >500:
        sent = '–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ ‚ùå'
        await call.bot.send_message(
            chat_id=call.message.chat.id,
            text=sent
        )
        asyncio.create_task(delete_message_later(sent, delay=5))
    else:
        await rq.set_user_data(user_id=call.from_user.id,description=description)
        sent = await call.bot.send_message(chat_id=call.message.chat.id, text='–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ ‚ûï')
        await state.set_state(br.BugReport.photo)
        await call.message.edit_text(
        '*–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ*\n\n–î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã –º—ã *–Ω–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ* —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–Ω–æ—Å—è—â–µ–µ—Å—è –∫ –æ—à–∏–±–∫–µ.\n\n*–§–æ—Ä–º–∞—Ç:* –§–æ—Ç–æ –æ—à–∏–±–∫–∏ *–±–µ–∑ –Ω–∞–¥–ø–∏—Å–µ–π –∫ —Ñ–æ—Ç–æ*',
            parse_mode='Markdown',
            reply_markup=kb.report_screenshot
        )
        asyncio.create_task(delete_message_later(sent, delay=10))

@router.message(br.BugReport.photo, F.photo)
async def save_photo(message: Message, state: FSMContext):
    if message.caption:
        await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –≤–Ω—É—Ç—Ä–∏ –Ω–µ–≥–æ ‚ùå')
    else:
        photo_id = message.photo[-1].file_id
        await rq.set_user_data(user_id=message.from_user.id, photo_id=photo_id)
        await state.update_data(photo=photo_id)
        sent = await message.answer('–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ ‚ûï')
        asyncio.create_task(delete_message_later(sent, delay=10))

@router.message(br.BugReport.photo)
async def check_photo(message: Message, state: FSMContext):
    sent = '–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ!'
    await message.answer(sent)
    asyncio.create_task(delete_message_later(sent, delay=5))

@router.callback_query(F.data == 'confirm_screenshot')
async def confirm_photo(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    photo = data.get('photo', '')
    if not photo:
        sent = '–í—ã –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–∏–ª–∏ —Ñ–æ—Ç–æ!'
        await call.bot.send_message(chat_id=call.message.chat.id,text=sent)
        asyncio.create_task(delete_message_later(sent, delay=5))
    else:
        await state.set_state(br.BugReport.confirm)
        await call.message.edit_text(
            '*–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–æ.*\n\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–ø–æ—Ä—Ç –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∏–ª–∏ –∂–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –µ–≥–æ –æ—Ç–º–µ–Ω–∏—Ç—å.',
            parse_mode='Markdown',
            reply_markup=kb.report_confirm
        )

@router.callback_query(F.data == 'skip_screenshot')
async def skip_photo(call: CallbackQuery, state: FSMContext):
    await rq.set_user_data(user_id=call.from_user.id,photo_id=None)
    await state.update_data(photo=None)
    await call.message.edit_text(
        '*–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–æ.*\n\n*–°–ö–†–ò–ù–®–û–¢ –ù–ï –ü–†–ò–ö–†–ï–ü–õ–Å–ù*\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–ø–æ—Ä—Ç –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∏–ª–∏ –∂–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –µ–≥–æ –æ—Ç–º–µ–Ω–∏—Ç—å.',
        parse_mode='Markdown',
        reply_markup=kb.report_confirm
    )

@router.callback_query(F.data == 'report_confirm')
async def send_report(call: CallbackQuery, state: FSMContext):
    await state.set_state(br.BugReport.confirm)
    data = await state.get_data()
    await rq.set_user_data(user_id=call.from_user.id, process=1)
    await call.message.edit_text(
        '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é –ø–∞–Ω–µ–ª—å.',
        reply_markup=kb.main_keyboard)
    await asyncio.sleep(1)
    await call.bot.send_message(chat_id=call.message.chat.id, text=f'–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –±–∞–≥-—Ä–µ–ø–æ—Ä—Ç ‚úÖ\n–û–ø–∏—Å–∞–Ω–∏–µ:{data.get("desc")}\n–§–æ—Ç–æ:{data.get("photo")}')
    await state.clear()

@router.callback_query(F.data == 'report_cancel')
async def cancel_report(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await rq.reset_user_data(user_id=call.from_user.id)
    await call.message.edit_text(
        '–ï—Å–ª–∏ –≤—ã –Ω–∞—à–ª–∏ –±–∞–≥ –≤ —Å–∏—Å—Ç–µ–º–µ (—á—Ç–æ-—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ —Ç–∞–∫), —Ç–æ –ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—Å–∞–≤ –ø—Ä–æ–±–ª–µ–º—É, –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –∑–¥–µ—Å—å.',
        reply_markup=kb.report_keyboard 
    )
    sent = '–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Ä–µ–ø–æ—Ä—Ç ‚ùå'
    delete_message_later(sent, delay=10)


@router.message(Command('admin'))
async def main_admin_panel(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    await message.answer('–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', reply_markup=kb.admin_keyboard)

@router.callback_query(F.data == 'reports_list')
async def reports_panel(call: CallbackQuery):
    count = await rq.reports_count()
    await reports_list(
        call,
        text=f'–î–æ—Å—Ç—É–ø–Ω–æ: {count} —Ä–µ–ø–æ—Ä—Ç–æ–≤',
        reply_markup=await kb.admin_reports()
    )

@router.callback_query(F.data == 'reports_back')
async def back_reprots(call: CallbackQuery):
    await call.message.edit_text('–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', reply_markup=kb.admin_keyboard)

@router.callback_query(F.data.startswith('reports_'))
async def report_detail(call: CallbackQuery):
    user_id = call.data.split('_', 1)[1]
    report = await rq.get_report_by_user(user_id)
    if not report:
        await call.answer('–†–µ–ø–æ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', show_alert=True)
        return

    username = report.username or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
    description = report.description
    photo_id = report.photo_id or '–ù–µ—Ç —Ñ–æ—Ç–æ'

    try:
        await call.message.delete()
    except Exception:
        pass
    text = (
        f'–†–µ–ø–æ—Ä—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è *{username}*\n\n'
        f'*–û–ø–∏—Å–∞–Ω–∏–µ:* {description}'
        )
    if photo_id:
        await call.bot.send_photo(
            chat_id=call.message.chat.id,
            photo=photo_id,
            caption=text,
            reply_markup=await kb.report_look(user_id),
            parse_mode='Markdown'
        )
    else:
        await call.bot.send_message(
            chat_id=call.message.chat.id,
            text=text + '\n*–§–æ—Ç–æ:* –ë–µ–∑ —Ñ–æ—Ç–æ',
            reply_markup=await kb.report_look(user_id),
            parse_mode='Markdown'
        )

@router.callback_query(F.data.startswith('report_accept_'))
async def report_accept(call: CallbackQuery):
    user_id = call.data.split('_', 2)[2]
    await rq.accept_report(user_id)
    await call.message.delete()
    count = await rq.reports_count()
    await call.bot.send_message(
        chat_id=call.message.chat.id,
        text=f'–î–æ—Å—Ç—É–ø–Ω–æ: {count} —Ä–µ–ø–æ—Ä—Ç–æ–≤',
        reply_markup=await kb.admin_reports()
    )
    sent = await call.bot.send_message(chat_id=call.message.chat.id, text='–†–µ–ø–æ—Ä—Ç —Ä–µ—à—ë–Ω ‚úÖ')
    asyncio.create_task(delete_message_later(sent, delay=10))

@router.callback_query(F.data.startswith('report_cancel_'))
async def report_cancel(call: CallbackQuery):
    user_id = call.data.split('_', 2)[2]
    await rq.cancel_report(user_id)
    count = await rq.reports_count()
    await reports_list(
        call,
        text=f'–î–æ—Å—Ç—É–ø–Ω–æ: {count} —Ä–µ–ø–æ—Ä—Ç–æ–≤',
        reply_markup=await kb.admin_reports()
    )
    sent = await call.bot.send_message(chat_id=call.message.chat.id, text='–†–µ–ø–æ—Ä—Ç –æ—Ç–∫–ª–æ–Ω—ë–Ω ‚ùå')
    asyncio.create_task(delete_message_later(sent, delay=10))

@router.callback_query(F.data.startswith('report_punish_'))
async def report_punish(call: CallbackQuery):
    user_id = call.data.split('_', 2)[2]
    await rq.punish_report(user_id)
    count = await rq.reports_count()
    await reports_list(
        call,
        text=f'–î–æ—Å—Ç—É–ø–Ω–æ: {count} —Ä–µ–ø–æ—Ä—Ç–æ–≤',
        reply_markup=await kb.admin_reports()
    )
    sent = await call.bot.send_message(chat_id=call.message.chat.id, text='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∫–∞–∑–∞–Ω üîî')
    asyncio.create_task(delete_message_later(sent, delay=10))
